#!/usr/bin/env node

// src/cli.ts
import { Command } from "commander";

// package.json
var package_default = {
  name: "nanogen",
  version: "0.4.6",
  description: "Minimalist static site generator in Node.js",
  repository: {
    type: "git",
    url: "git+https://github.com/doug2k1/nanogen.git"
  },
  keywords: [
    "static site generator"
  ],
  author: "Douglas Matoso <dmatoso@outlook.com> (https://dmatoso.com)",
  license: "MIT",
  type: "module",
  main: "dist/index.js",
  types: "dist/index.d.ts",
  exports: {
    ".": "./dist/index.js"
  },
  bin: {
    nanogen: "dist/cli.js"
  },
  files: [
    "dist",
    "template"
  ],
  scripts: {
    build: "tsup-node",
    clean: "rimraf dist",
    typecheck: "tsc --noEmit",
    test: "vitest run",
    "test:watch": "vitest watch",
    "test:coverage": "vitest --coverage",
    prettier: 'prettier "./{src,docs-src,template}/**/*.{js,ts,md,css,html}"',
    "prettier:check": "npm run prettier -- -l",
    lint: 'eslint "./{src,docs-src,template}/**/*"',
    start: "tsx src/cli.ts",
    "start:docs": "node dist/cli start",
    "build:docs": "cross-env NODE_ENV=production node dist/cli build",
    "update-template": "tsx scripts/update-template-version.ts"
  },
  engines: {
    node: ">=20.0.0"
  },
  dependencies: {
    chokidar: "^4.0.3",
    commander: "^13.0.0",
    ejs: "^3.1.10",
    "front-matter": "^4.0.2",
    "fs-extra": "^11.3.0",
    glob: "^11.0.1",
    "lodash.debounce": "^4.0.8",
    marked: "^15.0.6",
    nanospinner: "^1.2.2",
    picocolors: "^1.1.1",
    sirv: "^3.0.0",
    ws: "^8.18.0"
  },
  devDependencies: {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@tsconfig/node20": "^20.1.4",
    "@types/ejs": "^3.1.5",
    "@types/fs-extra": "^11.0.4",
    "@types/live-server": "^1.2.3",
    "@types/lodash.debounce": "^4.0.9",
    "@types/meow": "^6.0.0",
    "@types/node": "^22.10.6",
    "@types/ws": "^8.5.13",
    "@vitest/coverage-v8": "^2.1.8",
    "cross-env": "^7.0.3",
    eslint: "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-n": "^17.15.1",
    globals: "^15.14.0",
    nyc: "^17.1.0",
    prettier: "^3.4.2",
    rimraf: "^6.0.1",
    tsup: "^8.3.5",
    tsx: "^4.19.2",
    typescript: "^5.7.3",
    "vite-tsconfig-paths": "^5.1.4",
    vitest: "^2.1.8"
  },
  bugs: {
    url: "https://github.com/doug2k1/nanogen/issues"
  },
  homepage: "https://github.com/doug2k1/nanogen#readme"
};

// src/libs/config/parser.ts
var buildDefaults = {
  srcPath: "./src",
  outputPath: "./public",
  cleanUrls: true
};
var parseOptions = (options) => {
  const { srcPath, outputPath, cleanUrls } = Object.assign(
    {},
    buildDefaults,
    options.build
  );
  const site = options.site || {};
  return { srcPath, outputPath, cleanUrls, site };
};

// src/libs/logger/logger.ts
import pc from "picocolors";
var log = {
  info(message) {
    console.log(`${pc.gray("[nanogen]")} ${message}`);
  },
  success(message) {
    console.log(`${pc.gray("[nanogen]")} ${pc.green(message)}`);
  },
  error(message) {
    console.log(`${pc.gray("[nanogen]")} ${pc.red(message)}`);
  }
};

// src/modules/build/build.ts
import ejs from "ejs";
import frontMatter from "front-matter";
import fse from "fs-extra";
import { glob } from "glob";
import { marked } from "marked";
import path from "node:path";
import { hrtime } from "node:process";
var WS_CLIENT_SCRIPT = `
<script>
  (function() {
    const ws = new WebSocket(\`ws://\${location.host}\`);
    ws.onmessage = () => location.reload();
  })();
</script>
</body>`;
var build = (options = {}, mode = process.env.NODE_ENV || "production") => {
  log.info("Building site...");
  const startTime = hrtime.bigint();
  const { srcPath, outputPath, cleanUrls, site } = parseOptions(options);
  fse.emptyDirSync(outputPath);
  if (fse.existsSync(`${srcPath}/assets`)) {
    fse.copySync(`${srcPath}/assets`, outputPath);
  }
  const files = glob.sync("**/*.@(md|ejs|html)", { cwd: `${srcPath}/pages` });
  files.forEach(
    (file) => _buildPage(file, { srcPath, outputPath, cleanUrls, site }, mode)
  );
  const timeDiff = process.hrtime.bigint() - startTime;
  const duration = Number(timeDiff) / 1e6;
  log.success(`Site built successfully in ${duration} ms`);
};
var _loadLayout = (layout, { srcPath }) => {
  const file = `${srcPath}/layouts/${layout}.ejs`;
  const data = fse.readFileSync(file, "utf-8");
  return { file, data };
};
var _buildPage = (file, { srcPath, outputPath, cleanUrls, site }, mode) => {
  const fileData = path.parse(file);
  let destPath = path.join(outputPath, fileData.dir);
  if (cleanUrls && fileData.name !== "index") {
    destPath = path.join(destPath, fileData.name);
  }
  fse.mkdirsSync(destPath);
  const data = fse.readFileSync(`${srcPath}/pages/${file}`, "utf-8");
  const pageData = frontMatter(data);
  const templateConfig = {
    site,
    page: pageData.attributes
  };
  let pageContent;
  const pageSlug = file.split(path.sep).join("-");
  switch (fileData.ext) {
    case ".md":
      pageContent = marked.parse(pageData.body, { async: false });
      break;
    case ".ejs":
      pageContent = ejs.render(pageData.body, templateConfig, {
        filename: `${srcPath}/page-${pageSlug}`
      });
      break;
    default:
      pageContent = pageData.body;
  }
  const layoutName = pageData.attributes.layout || "default";
  const layout = _loadLayout(layoutName, {
    srcPath
  });
  let completePage = ejs.render(
    layout.data,
    Object.assign({}, templateConfig, {
      body: pageContent,
      filename: `${srcPath}/layout-${layoutName}`
    })
  );
  if (mode !== "production") {
    completePage = completePage.includes("</body>") ? completePage.replace("</body>", WS_CLIENT_SCRIPT) : completePage + WS_CLIENT_SCRIPT;
  }
  if (cleanUrls) {
    fse.writeFileSync(`${destPath}/index.html`, completePage);
  } else {
    fse.writeFileSync(`${destPath}/${fileData.name}.html`, completePage);
  }
};

// src/modules/init/init.ts
import fse2 from "fs-extra";
import { createSpinner } from "nanospinner";
import cp from "node:child_process";
import path2 from "node:path";
import { fileURLToPath } from "node:url";
import util from "node:util";
import pc2 from "picocolors";
var exec = util.promisify(cp.exec);
var __filename = fileURLToPath(import.meta.url);
var __dirname = path2.dirname(__filename);
var init = async (templateDir = "../template") => {
  log.info("Initializing a new Nanogen site ...");
  fse2.copySync(path2.resolve(__dirname, templateDir), ".");
  const spinner = createSpinner("Installing dependencies...").start();
  await exec("npm i --loglevel error");
  spinner.success();
  log.success(`Site initialized successfully!`);
  log.info(
    `Now you can run:
  ${pc2.cyan("npm start")}      to start your new site, or
  ${pc2.cyan("npm run build")}  to build it into the 'public' folder.`
  );
};

// src/libs/server/server.ts
import http from "node:http";
import sirv from "sirv";
import { WebSocketServer } from "ws";
var server = {
  serve({ path: path4, port = 3e3 }) {
    const staticHandler = sirv(path4, {
      dev: true,
      etag: true,
      single: true
    });
    const server2 = http.createServer((req, res) => {
      staticHandler(req, res);
    });
    const wss = new WebSocketServer({ server: server2 });
    wss.on("connection", (ws) => {
      ws.on("error", console.error);
    });
    server2.listen(port, () => {
      console.log(`Server running at http://localhost:${port}`);
    });
    return {
      reload: () => {
        wss.clients.forEach((client) => {
          client.send("reload");
        });
      }
    };
  }
};

// src/modules/serve/serve.ts
import chokidar from "chokidar";
import debounce from "lodash.debounce";
var serve = (options, flags) => {
  log.info(`Starting local server at http://localhost:${flags.port}`);
  const { srcPath, outputPath } = parseOptions(options);
  build(options, "development");
  const { reload } = server.serve({
    path: outputPath,
    port: Number(flags.port)
  });
  chokidar.watch(srcPath, { ignoreInitial: true }).on(
    "all",
    debounce(() => {
      build(options, "development");
      reload();
      log.info("Waiting for changes...");
    }, 500)
  );
};

// src/modules/cli/cli-process.ts
import path3 from "node:path";
var cliProcess = async ({ command, options = {} }) => {
  const config = options.config ? (await import(`file://${path3.resolve(options.config)}`)).default : {};
  switch (command) {
    case "init":
      await init();
      break;
    case "start":
      serve(config, options);
      break;
    case "build":
      build(config);
      break;
    default:
      break;
  }
};

// src/cli.ts
var program = new Command();
program.name("nanogen").description("A minimalist static site generator").version(package_default.version, "-v, --version").usage("<command> [options]");
program.command("init").description("Initialize a new site").action(async () => {
  await cliProcess({ command: "init" });
});
program.command("start").description("Start the current site").option(
  "-c, --config <file-path>",
  "Path to the config file",
  "site.config.js"
).option("-p, --port <port-number>", "Port to use for local server", "3000").action((options) => {
  cliProcess({
    command: "start",
    options: { config: options.config, port: options.port }
  });
});
program.command("build").description("Build the current site").option(
  "-c, --config <file-path>",
  "Path to the config file",
  "site.config.js"
).action((options) => {
  cliProcess({ command: "build", options: { config: options.config } });
});
program.parse();
